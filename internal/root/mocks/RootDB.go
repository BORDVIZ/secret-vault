// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "vault/internal/models"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// RootDB is an autogenerated mock type for the RootDB type
type RootDB struct {
	mock.Mock
}

// CheckVault provides a mock function with given fields: ctx, log, id
func (_m *RootDB) CheckVault(ctx context.Context, log *slog.Logger, id int) error {
	ret := _m.Called(ctx, log, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckVault")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, int) error); ok {
		r0 = rf(ctx, log, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVault provides a mock function with given fields: ctx, log, model
func (_m *RootDB) CreateVault(ctx context.Context, log *slog.Logger, model models.SecretCreateDTO) (int, error) {
	ret := _m.Called(ctx, log, model)

	if len(ret) == 0 {
		panic("no return value specified for CreateVault")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, models.SecretCreateDTO) (int, error)); ok {
		return rf(ctx, log, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, models.SecretCreateDTO) int); ok {
		r0 = rf(ctx, log, model)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slog.Logger, models.SecretCreateDTO) error); ok {
		r1 = rf(ctx, log, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVault provides a mock function with given fields: ctx, log, id
func (_m *RootDB) GetVault(ctx context.Context, log *slog.Logger, id int) (models.SecretModel, error) {
	ret := _m.Called(ctx, log, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVault")
	}

	var r0 models.SecretModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, int) (models.SecretModel, error)); ok {
		return rf(ctx, log, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, int) models.SecretModel); ok {
		r0 = rf(ctx, log, id)
	} else {
		r0 = ret.Get(0).(models.SecretModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slog.Logger, int) error); ok {
		r1 = rf(ctx, log, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRootDB creates a new instance of RootDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRootDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *RootDB {
	mock := &RootDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
